# Magic Square Generator

## Overview
This program generates a magic square of a given size \( n \), where a magic square is a \( n \times n \) grid filled with distinct integers from 1 to \( n^2 \), such that the sums of the integers in each row, column, and both diagonals are equal. This sum is known as the *magic constant*, calculated as:

\[
\text{Magic Constant} = \frac{n \times (n^2 + 1)}{2}
\]

The program uses a recursive backtracking algorithm to compute the magic square.

---

## Code Structure
The code is divided into several components:

### 1. **Main Program** (`main` function)
#### Purpose:
To handle user input, allocate memory for the magic square, and control the overall program flow.

#### Steps:
1. **Input Validation:**
   - Reads the size of the magic square \( n \) from the command-line arguments.
   - Ensures \( n > 0 \) before proceeding.

2. **Memory Allocation:**
   - Dynamically allocates memory for:
     - A 2D array (`matrix`) to store the magic square.
     - A `used` array to track which numbers from 1 to \( n^2 \) have been placed.

3. **Initialization:**
   - Initializes the `matrix` and `used` array to 0.

4. **Recursive Function Call:**
   - Calls `square_r` to compute the magic square. If successful, prints the resulting square; otherwise, indicates failure.

5. **Cleanup:**
   - Frees all allocated memory to avoid memory leaks.

---

### 2. **Recursive Function** (`square_r` function)
#### Purpose:
To generate a magic square recursively using backtracking.

#### Algorithm:
1. **Base Case:**
   - If all cells of the matrix are filled (\( k = n^2 \)), call the `check` function to verify if the matrix is a magic square. Return `1` (success) if it is valid; otherwise, return `0`.

2. **Recursive Case:**
   - Compute the current row (`i`) and column (`j`) based on \( k \).
   - Iterate through all possible values from 1 to \( n^2 \):
     - If a value has not been used (checked via `used` array):
       - Place the value in the current cell and mark it as used.
       - Recur with the next cell (\( k + 1 \)).
       - If a solution is found, return `1`.
       - Otherwise, backtrack by clearing the cell and marking the value as unused.

3. **Failure:**
   - If no valid value can be placed in the current cell, return `0`.

#### Time Complexity:
\( O((n^2)!) \) in the worst case, as the algorithm tries all permutations of \( n^2 \) numbers. This is computationally expensive for \( n > 3 \).

---

### 3. **Validation Function** (`check` function)
#### Purpose:
To verify if a given matrix is a magic square.

#### Algorithm:
1. **Row Sums:**
   - For each row, compute the sum of its elements and compare it with the magic constant. If any row does not match, return `0`.

2. **Column Sums:**
   - For each column, compute the sum of its elements and compare it with the magic constant. If any column does not match, return `0`.

3. **Diagonal Sums:**
   - Compute the sum of the primary diagonal (top-left to bottom-right) and the secondary diagonal (top-right to bottom-left). If either diagonal does not match the magic constant, return `0`.

4. **Success:**
   - If all checks pass, return `1`.

#### Time Complexity:
\( O(n^2) \) as all rows, columns, and diagonals are checked.

---

## Key Features
1. **Dynamic Memory Allocation:**
   - The program supports any valid \( n \), provided sufficient memory is available.

2. **Backtracking:**
   - Efficiently explores possible configurations and abandons invalid paths early.

3. **Input Validation:**
   - Ensures that user inputs are valid and provides meaningful error messages otherwise.

---

## Example Output
### Input:
```
4
```

### Output:
```
Magic square size: 4
Magic square of size 4:
 1   15  14  4
 12  6   7   9
 8   10  11  5
 13  3   2   16
```

### Edge Cases:
- **\( n = 1 \):** A trivial magic square exists, `[1]`.
- **\( n = 2 \):** No magic square is possible; the program will output `Magic square NOT found!`.

---

## Limitations
1. **Performance:**
   - The backtracking algorithm is computationally expensive for \( n > 3 \), leading to impractical runtimes.

2. **Memory Usage:**
   - The program allocates \( O(n^2) \) memory for the `matrix` and `used` arrays, which can become significant for large \( n \).

---

## Future Improvements
1. **Optimized Algorithms:**
   - Implement a direct construction method for odd \( n \) (Siamese method) and methods for doubly even and singly even \( n \).

2. **Parallelization:**
   - Use parallel processing to speed up the backtracking for larger \( n \).

3. **Improved User Interface:**
   - Allow users to specify \( n \) interactively or via configuration files.

---

## References
- "Magic Square Algorithms" on Wikipedia: <https://en.wikipedia.org/wiki/Magic_square>

